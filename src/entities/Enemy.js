import { getRandomPositiveInteger as t, didSucceedPercentChance as i } from "../../lib/RandomNumberHelpers.js"; import s from "../../lib/StateMachine.js"; import e from "../../lib/Sprite.js"; import o from "../enums/EnemyStateName.js"; import a from "../enums/ImageName.js"; import n from "../enums/SoundName.js"; import { images as h, timer as r } from "../globals.js"; import m from "../states/entity/enemy/EnemyIdlingState.js"; import d from "../states/entity/enemy/EnemyWalkingState.js"; import p from "../states/entity/enemy/EnemyChasingState.js"; import l from "./GameEntity.js"; import { context as x, DEBUG as f, sounds as y } from "../globals.js"; import g from "../../lib/Hitbox.js"; import c from "../objects/Bullet.js"; import S from "../user-interface/HealthBar.js"; import u from "./Player.js"; export default class B extends l { static WIDTH = 32; static HEIGHT = 64; static CHASE_DISTANCE = 200; static MAX_BULLET_SPEED = 200; static HEALTH_BAR_OFFSET = 10; constructor(i, s, o) { super(), this.player = s, this.sprites = i, this.position.x = o.x, this.position.y = o.y, this.dimensions.x = B.WIDTH, this.dimensions.y = B.HEIGHT, this.damageBox = new g(this.hitbox.position.x, this.hitbox.position.y, this.hitbox.dimensions.x, this.hitbox.dimensions.y, "blue"), this.damageBoxOffsets = new g(B.WIDTH / 4, B.HEIGHT / 2 + 15, -B.WIDTH / 2, -(B.HEIGHT / 2 + 15), "blue"), this.stateMachine = null, this.x_distance = 1e4, this.y_distance = 1e4, this.bulletSpeed = B.MAX_BULLET_SPEED, this.bulletSprites = e.generateSpritesFromSpriteSheet(h.get(a.Spit), c.SPIT_WIDTH, c.SPIT_HEIGHT), this.isColliding = !1, this.healthBar = new S(this.position.x, this.position.y - B.HEALTH_BAR_OFFSET, this, 32, 6), this.rateOfFire = t(10, 25) } toJSON() { let t = super.toJSON(); return t.damageBox = this.damageBox.toJSON(), t.damageBoxOffsets = this.damageBoxOffsets.toJSON(), t.x_distance = this.x_distance, t.y_distance = this.y_distance, t.isColliding = this.isColliding, t.healthBar = this.healthBar.toJSON(), t.rateOfFire = this.rateOfFire, t } static rebuildObject(t) { let i = l.rebuildObject(t); return i.damageBox = Object.setPrototypeOf(i.damageBox, g.prototype), i.damageBoxOffsets = Object.setPrototypeOf(i.damageBoxOffsets, g.prototype), (i = Object.setPrototypeOf(i, B.prototype)).healthBar = S.buildHealthBar(i.healthBar, i), i.bulletSprites = e.generateSpritesFromSpriteSheet(h.get(a.Spit), c.SPIT_WIDTH, c.SPIT_HEIGHT), i } render() { super.render(), this.healthBar.render(), f && this.damageBox.render(x) } update(t) { r.update(t), this.stateMachine?.update(t), this.currentAnimation.update(t), this.damageBox.set(this.position.x + this.damageBoxOffsets.position.x, this.position.y + this.damageBoxOffsets.position.y, this.dimensions.x + this.damageBoxOffsets.dimensions.x, this.dimensions.y + this.damageBoxOffsets.dimensions.y), this.hitbox.set(this.position.x + this.hitboxOffsets.position.x, this.position.y + this.hitboxOffsets.position.y, this.dimensions.x + this.hitboxOffsets.dimensions.x, this.dimensions.y + this.hitboxOffsets.dimensions.y), this.healthBar.changePosition({ x: this.position.x, y: this.position.y - B.HEALTH_BAR_OFFSET }) } initializeStateMachine(t, i) { let e = new s; return e.add(o.Idle, new m(this, t[o.Idle])), e.add(o.Chasing, new p(this, t[o.Chasing], t[o.Idle], i)), e.add(o.Walking, new d(this, t[o.Walking])), e.change(o.Walking), e } receiveDamage(t) { super.receiveDamage(t), y.play(n.EnemyHurt) } getDistanceToPlayer() { return this.x_distance = this.position.x - this.player.position.x, this.y_distance = this.position.y - this.player.position.y, Math.sqrt(this.x_distance * this.x_distance + this.y_distance * this.y_distance) } didCollideWithEntity(t, i = !1) { return i ? this.damageBox.didCollide(t) : this.hitbox.didCollide(t) } };