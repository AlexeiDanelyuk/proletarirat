import t from "../../lib/State.js"; import e from "../objects/Level.js"; import o from "../entities/Player.js"; import i from "../services/Map.js"; import s from "../enums/ImageName.js"; import r from "../enums/SoundName.js"; import n from "../enums/EnemyType.js"; import a from "../enums/GameStateName.js"; import h from "../entities/EnemyFactory.js"; import l from "../../lib/Sprite.js"; import { keys as u, sounds as m, images as c, stateMachine as f, CANVAS_HEIGHT as d, CANVAS_WIDTH as p, context as x, timer as y } from "../globals.js"; import $ from "../../lib/Animation.js"; export default class _ extends t { constructor() { super(), this.counter = 1, this.text = ["", "The year is 2007.", "You are a rat in the heart of Paris.", "Food is scarce and the streets are mean.", "In your search for a bite to eat, you have wandered into the famous Guseteau's.", "Digging through their bins, the only food you were able to find were some strange mushrooms.", "These mushrooms are special and are only ever intended to be used in very small quantities in delicacies.", "Not knowing this and overcome by extreme desperation and hunger, you eat your fill.", "Instead of killing you, however, these mushrooms grant you the magical powers of The Vibes.", "The Vibes allow you to shoot out energy blasts with just your mind!", "Your good friend Remi tells his kitchen staff friends about you and they offer you a deal:", "Deal with their rude bourgeois customers and get tasty bread in return.", "You accept this offer."], this.musicStarted = !1 } enter(t) { m.stop(r.LeFestin), this.counter = 0, this.newGameOptionSelected = t.newGameOptionSelected, m.play(r.CastOfCooks), y.addTask(() => { this.counter += .5 }, 1, 74, () => { f.change(a.Transition, { fromState: this, toState: f.states[a.Play], toStateEnterParameters: { newGameOptionSelected: t.newGameOptionSelected } }) }) } exit() { m.stop(r.CastOfCooks) } update(t) { y.update(t), u[" "] && (y.clear(), f.change(a.Transition, { fromState: this, toState: f.states[a.Play], toStateEnterParameters: { newGameOptionSelected: this.newGameOptionSelected } })) } render() { x.save(), x.font = "20px Dribble", x.fillStyle = "white", x.textBaseline = "middle", x.textAlign = "center", this.counter >= 1 && this.counter <= 3 && x.fillText(this.text[1], p / 2, d - 220), this.counter >= 2 && this.counter <= 3 && x.fillText(this.text[2], p / 2, d - 170), this.counter >= 3 && this.counter <= 3 && x.fillText(this.text[3], p / 2, d - 120), this.counter >= 5 && this.counter <= 6 && x.fillText(this.text[4], p / 2, d - 170), this.counter >= 8 && this.counter <= 14 && x.fillText(this.text[5], p / 2, d - 220), this.counter >= 10 && this.counter <= 14 && x.fillText(this.text[6], p / 2, d - 170), this.counter >= 12 && this.counter <= 14 && x.fillText(this.text[7], p / 2, d - 120), this.counter >= 16 && this.counter <= 20 && x.fillText(this.text[8], p / 2, d - 200), this.counter >= 18 && this.counter <= 20 && x.fillText(this.text[9], p / 2, d - 150), this.counter >= 22 && this.counter <= 29 && x.fillText(this.text[10], p / 2, d - 200), this.counter >= 24 && this.counter <= 29 && (x.font = "bold 20px Dribble", x.fillStyle = "crimson", x.shadowBlur = 20, x.shadowColor = "crimson", x.fillText(this.text[11], p / 2, d - 150), x.font = "20px Dribble", x.fillStyle = "white", x.shadowBlur = 0), this.counter >= 31.5 && x.fillText(this.text[12], p / 2, d - 170), x.restore() } };