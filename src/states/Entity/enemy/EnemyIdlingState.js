import t from "../../../../lib/Animation.js"; import i from "../../../../lib/State.js"; import e from "../../../entities/Enemy.js"; import n from "../../../enums/EnemyStateName.js"; import { timer as a } from "../../../globals.js"; import s from "../../../enums/Direction.js"; export default class o extends i { static MOVE_DURATION_MIN = 2; static MOVE_DURATION_MAX = 6; constructor(t, i) { super(), this.enemy = t, this.animation = i } toJSON() { let t = {}, i = Object.keys(this.animation); for (let e = 0; e < i.length; e++)t[i[e]] = this.animation[e].toJSON(); return { animation: t, className: this.constructor.name } } enter() { this.enemy.currentAnimation = this.animation[this.enemy.direction], this.idleDuration = 2, this.startTimer() } static buildObject(i, e) { i.animation = { [s.Up]: new t([0], 1), [s.Down]: new t([1], 1), [s.Left]: new t([3], 1), [s.Right]: new t([2], 1) }; for (let n = 0; n < i.animation.length; n++)i.animation[n].startTimer(); return i.enemy = e, Object.setPrototypeOf(i, o.prototype) } update(t) { this.timer.update(t), this.enemy.getDistanceToPlayer() <= e.CHASE_DISTANCE && (console.log("within distance"), this.enemy.changeState(n.Chasing)) } startTimer() { this.timer = a.wait(this.idleDuration, () => this.enemy.changeState(n.Walking)) } };