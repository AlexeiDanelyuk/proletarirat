import { keys as i, mouse as t, sounds as e } from "../../../globals.js"; import s from "../../../enums/SoundName.js"; import n from "../../../../lib/State.js"; import o from "../../../enums/Direction.js"; import r from "../../../../lib/Animation.js"; import a from "../../../enums/PlayerStateName.js"; import p from "../../../entities/Player.js"; import l from "../../../objects/Bullet.js"; export default class h extends n { constructor(i, t) { super(), this.level = t, this.player = i, this.animation = { [o.Up]: new r([15, 14, 13, 12, 11], .2), [o.Down]: new r([13, 14, 15, 16, 17], .2), [o.Left]: new r([35, 36, 37, 38], .15), [o.Right]: new r([32, 33, 34, 35], .15) } } startTimerOnAllAnimation() { Object.entries(this.animation).forEach(([i, t]) => { t.startTimer() }) } toJSON() { let i = {}, t = Object.keys(this.animation); for (let e = 0; e < t.length; e++)i[t[e]] = this.animation[e].toJSON(); return { animation: i, className: this.constructor.name } } static buildObject(i, t) { return i.animation = { [o.Up]: new r([15, 14, 13, 12, 11], .2), [o.Down]: new r([13, 14, 15, 16, 17], .2), [o.Left]: new r([35, 36, 37, 38], .15), [o.Right]: new r([32, 33, 34, 35], .15) }, i.player = t, Object.setPrototypeOf(i, h.prototype) } enter() { this.player.currentAnimation = this.animation[this.player.direction] } update(i) { this.handleMovement(i) } handleMovement(n) { this.player.currentAnimation = this.animation[this.player.direction], t.click && (e.play(s.VibeShot), this.level.addObject(new l(this.player, t.click)), t.click = null), i.s ? (this.player.direction = o.Down, this.player.position.y += this.player.speed * n, this.player.position.y + this.player.dimensions.y > 316 && (this.player.position.y = 316 - this.player.dimensions.y)) : i.d ? (this.player.direction = o.Right, this.player.position.x += this.player.speed * n, this.player.position.x + this.player.dimensions.x > 448 && (this.player.position.x = 448 - this.player.dimensions.x)) : i.w ? (this.player.direction = o.Up, this.player.position.y -= this.player.speed * n, this.player.position.y < 86 - this.player.dimensions.y / 2 && (this.player.position.y = 86 - this.player.dimensions.y / 2)) : i.a ? (this.player.direction = o.Left, this.player.position.x -= this.player.speed * n, this.player.position.x < 32 && (this.player.position.x = 32)) : this.player.changeState(a.Idle) } };