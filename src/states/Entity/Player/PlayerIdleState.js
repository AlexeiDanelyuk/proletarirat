import t from "../../../../lib/State.js"; import e from "../../../enums/Direction.js"; import i from "../../../../lib/Animation.js"; import n from "../../../enums/PlayerStateName.js"; import { keys as r, mouse as a } from "../../../globals.js"; import o from "../../../entities/Player.js"; import s from "../../../objects/Bullet.js"; export default class l extends t { constructor(t, n) { super(), this.player = t, this.level = n, this.animation = { [e.Up]: new i([13], 1), [e.Down]: new i([14], 1), [e.Left]: new i([34], 1), [e.Right]: new i([35], 1) } } startTimerOnAllAnimation() { Object.entries(this.animation).forEach(([t, e]) => { e.startTimer() }) } toJSON() { let t = {}, e = Object.keys(this.animation); for (let i = 0; i < e.length; i++)t[e[i]] = this.animation[i].toJSON(); return { animation: t, className: this.constructor.name } } static buildObject(t, n) { return t.animation = { [e.Up]: new i([13], 1), [e.Down]: new i([14], 1), [e.Left]: new i([34], 1), [e.Right]: new i([35], 1) }, t.player = n, Object.setPrototypeOf(t, l.prototype) } enter() { this.player.sprites = this.player.sprites, this.player.currentAnimation = this.animation[this.player.direction] } update() { this.checkForMovement() } checkForMovement() { a.click && (this.level.addObject(new s(this.player, a.click)), a.click = null), r.s ? (this.player.direction = e.Down, this.player.changeState(n.WalkingAndShooting)) : r.d ? (this.player.direction = e.Right, this.player.changeState(n.WalkingAndShooting)) : r.w ? (this.player.direction = e.Up, this.player.changeState(n.WalkingAndShooting)) : r.a && (this.player.direction = e.Left, this.player.changeState(n.WalkingAndShooting)) } };